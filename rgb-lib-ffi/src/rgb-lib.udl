namespace rgb_lib {
  Keys generate_keys(BitcoinNetwork bitcoin_network);

  [Throws=RgbLibError]
  Keys restore_keys(BitcoinNetwork bitcoin_network, string mnemonic);
};

[Error]
interface RgbLibError {
  AllocationsAlreadyAvailable();
  AssetNotFound(string asset_id);
  BatchTransferNotFound(string txid);
  BlindedUTXOAlreadyUsed();
  CannotChangeOnline();
  CannotDeleteTransfer();
  CannotFailTransfer();
  CannotSendToSelf();
  Electrum(string details);
  FailedBdkSync(string details);
  FailedBroadcast(string details);
  FailedIssuance(string details);
  IO(string details);
  Inconsistency(string details);
  InexistentDataDir();
  InsufficientAllocationSlots();
  InsufficientBitcoins(u64 needed, u64 available);
  InsufficientSpendableAssets(string asset_id);
  InsufficientTotalAssets(string asset_id);
  Internal(string details);
  InvalidAddress(string details);
  InvalidBitcoinKeys();
  InvalidBlindedUTXO(string details);
  InvalidConsignmentEndpoint(string details);
  InvalidConsignmentEndpoints(string details);
  InvalidDescription(string details);
  InvalidElectrum(string details);
  InvalidFeeRate(string details);
  InvalidFilePath(string file_path);
  InvalidInvoice(string details);
  InvalidMnemonic(string details);
  InvalidName(string details);
  InvalidOnline();
  InvalidParentId(string details);
  InvalidPrecision(string details);
  InvalidPsbt(string details);
  InvalidPubkey(string details);
  InvalidTicker(string details);
  NoIssuanceAmounts();
  NoValidConsignmentEndpoint();
  Proxy(string details);
  TransferNotFound(string blinded_utxo);
  UnknownRgbSchema(string schema_id);
  UnsupportedConsignmentEndpointProtocol();
  UnsupportedInvoice();
  WatchOnly();
};

enum AssetType {
  "Rgb20",
  "Rgb121",
};

dictionary AssetRgb20 {
  string asset_id;
  string ticker;
  string name;
  u8 precision;
  Balance balance;
};

dictionary Media {
  string file_path;
  string mime;
};

dictionary AssetRgb121 {
  string asset_id;
  string name;
  string? description;
  u8 precision;
  Balance balance;
  sequence<Media> data_paths;
  string? parent_id;
};

dictionary Assets {
  sequence<AssetRgb20>? rgb20;
  sequence<AssetRgb121>? rgb121;
};

dictionary Balance {
  u64 settled;
  u64 future;
  u64 spendable;
};

enum BitcoinNetwork {
  "Mainnet",
  "Testnet",
  "Signet",
  "Regtest",
};

dictionary BlindData {
  string invoice;
  string blinded_utxo;
  u64 blinding_secret;
  i64? expiration_timestamp;
};

interface BlindedUTXO {
  [Throws=RgbLibError]
  constructor(string blinded_utxo);
};

interface ConsignmentEndpoint {
  [Throws=RgbLibError]
  constructor(string consignment_endpoint);

  ConsignmentEndpointProtocolType protocol();
};

enum ConsignmentEndpointProtocolType {
  "Storm",
  "RgbHttpJsonRpc",
};

enum DatabaseType {
  "Sqlite",
};

interface Invoice {
  [Throws=RgbLibError]
  constructor(string bech32_invoice);

  [Name=from_invoice_data, Throws=RgbLibError]
  constructor(InvoiceData invoice_data);

  InvoiceData invoice_data();

  string bech32_invoice();
};

dictionary InvoiceData {
  string blinded_utxo;
  string? asset_id;
  u64? amount;
  i64? expiration_timestamp;
  sequence<string> consignment_endpoints;
};

dictionary Keys {
  string mnemonic;
  string xpub;
  string xpub_fingerprint;
};

dictionary Metadata {
  AssetType asset_type;
  u64 issued_supply;
  i64 timestamp;
  string name;
  u8 precision;
  string? ticker;
  string? description;
  string? parent_id;
};

dictionary Online {
  u64 id;
  string electrum_url;
};

dictionary Outpoint {
  string txid;
  u32 vout;
};

dictionary Recipient {
  string blinded_utxo;
  u64 amount;
  sequence<string> consignment_endpoints;
};

dictionary RefreshFilter {
  RefreshTransferStatus status;
  boolean incoming;
};

enum RefreshTransferStatus {
  "WaitingCounterparty",
  "WaitingConfirmations",
};

dictionary RgbAllocation {
  string? asset_id;
  u64 amount;
  boolean settled;
};

dictionary TransferConsignmentEndpoint {
  string endpoint;
  ConsignmentEndpointProtocolType protocol;
  boolean used;
};

enum TransferKind {
  "Issuance",
  "Receive",
  "Send",
};

enum TransferStatus {
  "WaitingCounterparty",
  "WaitingConfirmations",
  "Settled",
  "Failed",
};

dictionary Transfer {
  i64 idx;
  i64 created_at;
  i64 updated_at;
  TransferStatus status;
  u64 amount;
  TransferKind kind;
  string? txid;
  string? blinded_utxo;
  Outpoint? unblinded_utxo;
  Outpoint? change_utxo;
  u64? blinding_secret;
  i64? expiration;
  sequence<TransferConsignmentEndpoint> consignment_endpoints;
};

dictionary Unspent {
  Utxo utxo;
  sequence<RgbAllocation> rgb_allocations;
};

dictionary Utxo {
  Outpoint outpoint;
  u64 btc_amount;
  boolean colorable;
};

dictionary WalletData {
  string data_dir;
  BitcoinNetwork bitcoin_network;
  DatabaseType database_type;
  string pubkey;
  string? mnemonic;
};

interface Wallet {
  [Throws=RgbLibError]
  constructor(WalletData wallet_data);

  [Throws=RgbLibError]
  BlindData blind(string? asset_id, u64? amount, u32? duration_seconds, sequence<string> consignment_endpoints);

  [Throws=RgbLibError]
  u8 create_utxos(Online online, boolean up_to, u8? num, u32? size, f32 fee_rate);

  [Throws=RgbLibError]
  string create_utxos_begin(Online online, boolean up_to, u8? num, u32? size, f32 fee_rate);

  [Throws=RgbLibError]
  u8 create_utxos_end(Online online, string signed_psbt);

  [Throws=RgbLibError]
  boolean delete_transfers(string? blinded_utxo, string? txid, boolean no_asset_only);

  [Throws=RgbLibError]
  string drain_to(Online online, string address, boolean destroy_assets, f32 fee_rate);

  [Throws=RgbLibError]
  string drain_to_begin(Online online, string address, boolean destroy_assets, f32 fee_rate);

  [Throws=RgbLibError]
  string drain_to_end(Online online, string signed_psbt);

  [Throws=RgbLibError]
  boolean fail_transfers(Online online, string? blinded_utxo, string? txid, boolean no_asset_only);

  string get_address();

  [Throws=RgbLibError]
  Balance get_asset_balance(string asset_id);

  [Throws=RgbLibError]
  Metadata get_asset_metadata(Online online, string asset_id);

  [Throws=RgbLibError]
  Online go_online(boolean skip_consistency_check, string electrum_url);

  [Throws=RgbLibError]
  AssetRgb20 issue_asset_rgb20(
    Online online, string ticker, string name, u8 precision,
    sequence<u64> amounts);

  [Throws=RgbLibError]
  AssetRgb121 issue_asset_rgb121(
    Online online, string name, string? description, u8 precision,
    sequence<u64> amounts, string? parent_id, string? file_path);

  [Throws=RgbLibError]
  Assets list_assets(sequence<AssetType> filter_asset_types);

  [Throws=RgbLibError]
  sequence<Transfer> list_transfers(string asset_id);

  [Throws=RgbLibError]
  sequence<Unspent> list_unspents(boolean settled_only);

  [Throws=RgbLibError]
  boolean refresh(Online online, string? asset_id, sequence<RefreshFilter> filter);

  [Throws=RgbLibError]
  string send(
    Online online, record<DOMString, sequence<Recipient>> recipient_map,
    boolean donation, f32 fee_rate);

  [Throws=RgbLibError]
  string send_begin(
    Online online, record<DOMString, sequence<Recipient>> recipient_map,
    boolean donation, f32 fee_rate);

  [Throws=RgbLibError]
  string send_end(Online online, string signed_psbt);
};
